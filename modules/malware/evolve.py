import random
import string

def evaluate_fitness(code):
    # Evaluate the fitness of the code
    # You can define your own fitness function here
    # The fitness value should indicate how good the code is

    # For demonstration purposes, let's calculate the fitness as the sum of ASCII values
    return sum(ord(char) for char in code)

def mutate(code, mutation_rate):
    # Mutate the code by renaming variables and obfuscating the code
    mutated_code = list(code)
    for i in range(len(mutated_code)):
        if random.random() < mutation_rate and code[i] in string.ascii_letters:
            mutated_code[i] = random.choice(string.ascii_letters)
    return ''.join(mutated_code)

# Main genetic algorithm loop
def evolve(script):
    # Read the current script
    with open(script, 'r') as file:
        current_code = file.read()

    best_code = current_code
    best_fitness = evaluate_fitness(current_code)

    # Number of generations
    num_generations = 100
    # Mutation rate (probability of changing a character)
    mutation_rate = 0.01

    for generation in range(num_generations):
        print(f"Generation {generation+1}: Best fitness = {best_fitness}")

        # Mutate the current code
        mutated_code = mutate(current_code, mutation_rate)

        # Evaluate the fitness of the mutated code
        mutated_fitness = evaluate_fitness(mutated_code)

        # If the mutated code has better fitness, update the best code and fitness
        if mutated_fitness > best_fitness:
            best_code = mutated_code
            best_fitness = mutated_fitness

    # Write the best code to a new script file
    with open(f'obfuscated_{script}', 'w') as file:
        file.write(best_code)

evolve(script='hello.py')